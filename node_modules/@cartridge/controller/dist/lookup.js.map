{"version":3,"sources":["../src/lookup.ts","../src/constants.ts"],"sourcesContent":["import { LookupRequest, LookupResponse } from \"./types\";\nimport { num } from \"starknet\";\nimport { API_URL } from \"./constants\";\n\nconst cache = new Map<string, string>();\n\nasync function lookup(request: LookupRequest): Promise<LookupResponse> {\n  if (!request.addresses?.length && !request.usernames?.length) {\n    return { results: [] };\n  }\n\n  const response = await fetch(`${API_URL}/lookup`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(request),\n  });\n\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n\n  return response.json();\n}\n\nexport async function lookupUsernames(\n  usernames: string[],\n): Promise<Map<string, string>> {\n  const uncachedUsernames = usernames.filter((name) => !cache.has(name));\n\n  if (uncachedUsernames.length > 0) {\n    const response = await lookup({ usernames: uncachedUsernames });\n\n    response.results.forEach((result) => {\n      cache.set(result.username, result.addresses[0]); // TODO: handle multiple controller addresses\n    });\n  }\n\n  return new Map(\n    usernames\n      .map((name) => [name, cache.get(name)] as [string, string])\n      .filter((entry): entry is [string, string] => entry[1] !== undefined),\n  );\n}\n\nexport async function lookupAddresses(\n  addresses: string[],\n): Promise<Map<string, string>> {\n  addresses = addresses.map(num.toHex);\n  const uncachedAddresses = addresses.filter((addr) => !cache.has(addr));\n\n  if (uncachedAddresses.length > 0) {\n    const response = await lookup({\n      addresses: uncachedAddresses,\n    });\n\n    response.results.forEach((result) => {\n      cache.set(result.addresses[0], result.username); // TODO: handle multiple controller addresses\n    });\n  }\n\n  return new Map(\n    addresses\n      .map((addr) => [addr, cache.get(addr)] as [string, string])\n      .filter((entry): entry is [string, string] => entry[1] !== undefined),\n  );\n}\n","export const KEYCHAIN_URL = \"https://x.cartridge.gg\";\nexport const PROFILE_URL = \"https://profile.cartridge.gg\";\nexport const API_URL = \"https://api.cartridge.gg\";\n"],"mappings":";AACA,SAAS,WAAW;;;ACCb,IAAM,UAAU;;;ADEvB,IAAM,QAAQ,oBAAI,IAAoB;AAEtC,eAAe,OAAO,SAAiD;AACrE,MAAI,CAAC,QAAQ,WAAW,UAAU,CAAC,QAAQ,WAAW,QAAQ;AAC5D,WAAO,EAAE,SAAS,CAAC,EAAE;AAAA,EACvB;AAEA,QAAM,WAAW,MAAM,MAAM,GAAG,OAAO,WAAW;AAAA,IAChD,QAAQ;AAAA,IACR,SAAS;AAAA,MACP,gBAAgB;AAAA,IAClB;AAAA,IACA,MAAM,KAAK,UAAU,OAAO;AAAA,EAC9B,CAAC;AAED,MAAI,CAAC,SAAS,IAAI;AAChB,UAAM,IAAI,MAAM,uBAAuB,SAAS,MAAM,EAAE;AAAA,EAC1D;AAEA,SAAO,SAAS,KAAK;AACvB;AAEA,eAAsB,gBACpB,WAC8B;AAC9B,QAAM,oBAAoB,UAAU,OAAO,CAAC,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC;AAErE,MAAI,kBAAkB,SAAS,GAAG;AAChC,UAAM,WAAW,MAAM,OAAO,EAAE,WAAW,kBAAkB,CAAC;AAE9D,aAAS,QAAQ,QAAQ,CAAC,WAAW;AACnC,YAAM,IAAI,OAAO,UAAU,OAAO,UAAU,CAAC,CAAC;AAAA,IAChD,CAAC;AAAA,EACH;AAEA,SAAO,IAAI;AAAA,IACT,UACG,IAAI,CAAC,SAAS,CAAC,MAAM,MAAM,IAAI,IAAI,CAAC,CAAqB,EACzD,OAAO,CAAC,UAAqC,MAAM,CAAC,MAAM,MAAS;AAAA,EACxE;AACF;AAEA,eAAsB,gBACpB,WAC8B;AAC9B,cAAY,UAAU,IAAI,IAAI,KAAK;AACnC,QAAM,oBAAoB,UAAU,OAAO,CAAC,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC;AAErE,MAAI,kBAAkB,SAAS,GAAG;AAChC,UAAM,WAAW,MAAM,OAAO;AAAA,MAC5B,WAAW;AAAA,IACb,CAAC;AAED,aAAS,QAAQ,QAAQ,CAAC,WAAW;AACnC,YAAM,IAAI,OAAO,UAAU,CAAC,GAAG,OAAO,QAAQ;AAAA,IAChD,CAAC;AAAA,EACH;AAEA,SAAO,IAAI;AAAA,IACT,UACG,IAAI,CAAC,SAAS,CAAC,MAAM,MAAM,IAAI,IAAI,CAAC,CAAqB,EACzD,OAAO,CAAC,UAAqC,MAAM,CAAC,MAAM,MAAS;AAAA,EACxE;AACF;","names":[]}