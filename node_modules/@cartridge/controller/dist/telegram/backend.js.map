{"version":3,"sources":["../../src/telegram/backend.ts"],"sourcesContent":["import { cloudStorage, openLink } from \"@telegram-apps/sdk\";\nimport { UnifiedBackend } from \"src/session/backend\";\n\n/**\n * Implements the UnifiedBackend interface for Telegram storage operations.\n */\nexport class TelegramBackend implements UnifiedBackend {\n  /**\n   * Retrieves the value associated with the specified key from Telegram cloud storage.\n   * @param key - The key to look up in the storage.\n   * @returns A promise that resolves to the stored value as a string, or null if the key doesn't exist.\n   */\n  async get(key: string): Promise<string | null> {\n    return await cloudStorage.getItem(key);\n  }\n\n  /**\n   * Stores a key-value pair in Telegram cloud storage.\n   * @param key - The key under which to store the value.\n   * @param value - The value to be stored.\n   * @returns A promise that resolves when the value has been successfully stored.\n   */\n  async set(key: string, value: string): Promise<void> {\n    await cloudStorage.setItem(key, value);\n  }\n\n  /**\n   * Removes the key-value pair associated with the specified key from Telegram cloud storage.\n   * @param key - The key of the item to be removed.\n   * @returns A promise that resolves when the item has been successfully removed.\n   */\n  async delete(key: string): Promise<void> {\n    await cloudStorage.deleteItem(key);\n  }\n\n  /**\n   * Opens the specified URL using Telegram's openLink function.\n   * @param url - The URL to open.\n   */\n  openLink(url: string): void {\n    openLink(url);\n  }\n}\n"],"mappings":";AAAA,SAAS,cAAc,gBAAgB;AAMhC,IAAM,kBAAN,MAAgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMrD,MAAM,IAAI,KAAqC;AAC7C,WAAO,MAAM,aAAa,QAAQ,GAAG;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,IAAI,KAAa,OAA8B;AACnD,UAAM,aAAa,QAAQ,KAAK,KAAK;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,OAAO,KAA4B;AACvC,UAAM,aAAa,WAAW,GAAG;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,KAAmB;AAC1B,aAAS,GAAG;AAAA,EACd;AACF;","names":[]}