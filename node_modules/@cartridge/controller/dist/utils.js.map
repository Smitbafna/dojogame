{"version":3,"sources":["../src/utils.ts"],"sourcesContent":["import {\n  addAddressPadding,\n  Call,\n  CallData,\n  getChecksumAddress,\n  hash,\n  typedData,\n  TypedDataRevision,\n} from \"starknet\";\nimport wasm from \"@cartridge/account-wasm/controller\";\nimport { Policies, SessionPolicies } from \"@cartridge/presets\";\n\n// Whitelist of allowed property names to prevent prototype pollution\nconst ALLOWED_PROPERTIES = new Set([\n  \"contracts\",\n  \"messages\",\n  \"target\",\n  \"method\",\n  \"name\",\n  \"description\",\n  \"types\",\n  \"domain\",\n  \"primaryType\",\n]);\n\nfunction validatePropertyName(prop: string): void {\n  if (!ALLOWED_PROPERTIES.has(prop)) {\n    throw new Error(`Invalid property name: ${prop}`);\n  }\n}\n\nfunction safeObjectAccess<T>(obj: any, prop: string): T {\n  validatePropertyName(prop);\n  return obj[prop];\n}\n\nexport function normalizeCalls(calls: Call | Call[]) {\n  return toArray(calls).map((call) => {\n    return {\n      entrypoint: call.entrypoint,\n      contractAddress: addAddressPadding(call.contractAddress),\n      calldata: CallData.toHex(call.calldata),\n    };\n  });\n}\n\nexport function toSessionPolicies(policies: Policies): SessionPolicies {\n  return Array.isArray(policies)\n    ? policies.reduce<SessionPolicies>(\n        (prev, p) => {\n          if (safeObjectAccess<string>(p, \"target\")) {\n            const target = getChecksumAddress(\n              safeObjectAccess<string>(p, \"target\"),\n            );\n            const entrypoint = safeObjectAccess<string>(p, \"method\");\n            const contracts = safeObjectAccess<Record<string, any>>(\n              prev,\n              \"contracts\",\n            );\n            const item = {\n              name: humanizeString(entrypoint),\n              entrypoint: entrypoint,\n              description: safeObjectAccess<string>(p, \"description\"),\n            };\n\n            if (target in contracts) {\n              const methods = toArray(contracts[target].methods);\n              contracts[target] = {\n                methods: [...methods, item],\n              };\n            } else {\n              contracts[target] = {\n                methods: [item],\n              };\n            }\n          } else {\n            const messages = safeObjectAccess<any[]>(prev, \"messages\");\n            messages.push(p);\n          }\n\n          return prev;\n        },\n        { contracts: {}, messages: [] },\n      )\n    : policies;\n}\n\nexport function toWasmPolicies(policies: SessionPolicies): wasm.Policy[] {\n  return [\n    ...Object.entries(policies.contracts ?? {}).flatMap(\n      ([target, { methods }]) =>\n        toArray(methods).map((m) => ({\n          target,\n          method: m.entrypoint,\n        })),\n    ),\n    ...(policies.messages ?? []).map((p) => {\n      const domainHash = typedData.getStructHash(\n        p.types,\n        \"StarknetDomain\",\n        p.domain,\n        TypedDataRevision.ACTIVE,\n      );\n      const typeHash = typedData.getTypeHash(\n        p.types,\n        p.primaryType,\n        TypedDataRevision.ACTIVE,\n      );\n\n      return {\n        scope_hash: hash.computePoseidonHash(domainHash, typeHash),\n      };\n    }),\n  ];\n}\n\nexport function toArray<T>(val: T | T[]): T[] {\n  return Array.isArray(val) ? val : [val];\n}\n\nexport function humanizeString(str: string): string {\n  return (\n    str\n      // Convert from camelCase or snake_case\n      .replace(/([a-z])([A-Z])/g, \"$1 $2\") // camelCase to spaces\n      .replace(/_/g, \" \") // snake_case to spaces\n      .toLowerCase()\n      // Capitalize first letter\n      .replace(/^\\w/, (c) => c.toUpperCase())\n  );\n}\n"],"mappings":"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","names":[]}