{"version":3,"sources":["../../src/session/backend.ts"],"sourcesContent":["/**\n * Represents a unified backend for storage operations and link handling.\n */\nexport interface UnifiedBackend {\n  /**\n   * Retrieves the value associated with the specified key.\n   * @param key - The key to look up in the storage.\n   * @returns A promise that resolves to the stored value as a string, or null if the key doesn't exist.\n   */\n  get: (key: string) => Promise<string | null>;\n\n  /**\n   * Stores a key-value pair in the storage.\n   * @param key - The key under which to store the value.\n   * @param value - The value to be stored.\n   * @returns A promise that resolves when the value has been successfully stored.\n   */\n  set: (key: string, value: string) => Promise<void>;\n\n  /**\n   * Removes the key-value pair associated with the specified key from the storage.\n   * @param key - The key of the item to be removed.\n   * @returns A promise that resolves when the item has been successfully removed.\n   */\n  delete: (key: string) => Promise<void>;\n\n  /**\n   * Opens the specified URL.\n   * @param url - The URL to open.\n   */\n  openLink: (url: string) => void;\n}\n\n/**\n * Implements a local storage backend that conforms to the UnifiedBackend interface.\n */\nexport class LocalStorageBackend {\n  /**\n   * Retrieves the value associated with the specified key from local storage.\n   * @param key - The key to look up in local storage.\n   * @returns A promise that resolves to the stored value as a string, or null if the key doesn't exist.\n   */\n  async get(key: string): Promise<string | null> {\n    return localStorage.getItem(key);\n  }\n\n  /**\n   * Stores a key-value pair in local storage.\n   * @param key - The key under which to store the value.\n   * @param value - The value to be stored.\n   * @returns A promise that resolves when the value has been successfully stored.\n   */\n  async set(key: string, value: string): Promise<void> {\n    localStorage.setItem(key, value);\n  }\n\n  /**\n   * Removes the key-value pair associated with the specified key from local storage.\n   * @param key - The key of the item to be removed.\n   * @returns A promise that resolves when the item has been successfully removed.\n   */\n  async delete(key: string): Promise<void> {\n    localStorage.removeItem(key);\n  }\n\n  /**\n   * Opens the specified URL in a new tab or window.\n   * @param url - The URL to open.\n   */\n  openLink(url: string): void {\n    window.open(url, \"_blank\");\n  }\n}\n"],"mappings":";AAoCO,IAAM,sBAAN,MAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM/B,MAAM,IAAI,KAAqC;AAC7C,WAAO,aAAa,QAAQ,GAAG;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,IAAI,KAAa,OAA8B;AACnD,iBAAa,QAAQ,KAAK,KAAK;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,OAAO,KAA4B;AACvC,iBAAa,WAAW,GAAG;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,KAAmB;AAC1B,WAAO,KAAK,KAAK,QAAQ;AAAA,EAC3B;AACF;","names":[]}