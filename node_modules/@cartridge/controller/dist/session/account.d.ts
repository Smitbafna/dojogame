import { Policy } from '@cartridge/account-wasm';
import { CartridgeSessionAccount } from '@cartridge/account-wasm/session';
import { WalletAccount, Call, InvokeFunctionResponse } from 'starknet';
import BaseProvider from '../provider.js';
export { NotReadyToConnect } from '../errors.js';
export { C as ConnectError, b as ConnectReply, e as ControllerAccounts, a as ControllerError, g as ControllerOptions, D as DeployReply, E as ExecuteReply, h as IFrameOptions, I as IFrames, K as Keychain, j as KeychainOptions, L as LookupRequest, d as LookupResponse, c as LookupResult, M as Modal, m as Prefund, P as ProbeReply, f as Profile, l as ProfileContextTypeVariant, k as ProfileOptions, i as ProviderOptions, R as ResponseCodes, S as Session, T as Tokens } from '../types-CCH1I4-O.js';
import '@starknet-io/types-js';
import '@cartridge/penpal';
import '../index.d-BbTUPBeO.js';

declare class SessionAccount extends WalletAccount {
    controller: CartridgeSessionAccount;
    constructor(provider: BaseProvider, { rpcUrl, privateKey, address, ownerGuid, chainId, expiresAt, policies, }: {
        rpcUrl: string;
        privateKey: string;
        address: string;
        ownerGuid: string;
        chainId: string;
        expiresAt: number;
        policies: Policy[];
    });
    /**
     * Invoke execute function in account contract
     *
     * @param calls the invocation object or an array of them, containing:
     * - contractAddress - the address of the contract
     * - entrypoint - the entrypoint of the contract
     * - calldata - (defaults to []) the calldata
     * - signature - (defaults to []) the signature
     * @param abis (optional) the abi of the contract for better displaying
     *
     * @returns response from addTransaction
     */
    execute(calls: Call | Call[]): Promise<InvokeFunctionResponse>;
}

export { SessionAccount as default };
