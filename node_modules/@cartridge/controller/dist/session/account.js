// src/session/account.ts
import { CartridgeSessionAccount } from "@cartridge/account-wasm/session";
import { WalletAccount } from "starknet";

// src/utils.ts
import {
  addAddressPadding,
  CallData,
  getChecksumAddress,
  hash,
  typedData,
  TypedDataRevision
} from "starknet";
function normalizeCalls(calls) {
  return toArray(calls).map((call) => {
    return {
      entrypoint: call.entrypoint,
      contractAddress: addAddressPadding(call.contractAddress),
      calldata: CallData.toHex(call.calldata)
    };
  });
}
function toArray(val) {
  return Array.isArray(val) ? val : [val];
}

// src/errors.ts
var NotReadyToConnect = class _NotReadyToConnect extends Error {
  constructor() {
    super("Not ready to connect");
    Object.setPrototypeOf(this, _NotReadyToConnect.prototype);
  }
};

// src/types.ts
var ResponseCodes = /* @__PURE__ */ ((ResponseCodes2) => {
  ResponseCodes2["SUCCESS"] = "SUCCESS";
  ResponseCodes2["NOT_CONNECTED"] = "NOT_CONNECTED";
  ResponseCodes2["ERROR"] = "ERROR";
  ResponseCodes2["CANCELED"] = "CANCELED";
  ResponseCodes2["USER_INTERACTION_REQUIRED"] = "USER_INTERACTION_REQUIRED";
  return ResponseCodes2;
})(ResponseCodes || {});

// src/session/account.ts
var SessionAccount = class extends WalletAccount {
  constructor(provider, {
    rpcUrl,
    privateKey,
    address,
    ownerGuid,
    chainId,
    expiresAt,
    policies
  }) {
    super({ nodeUrl: rpcUrl }, provider);
    this.controller = CartridgeSessionAccount.new_as_registered(
      rpcUrl,
      privateKey,
      address,
      ownerGuid,
      chainId,
      {
        expiresAt,
        policies
      }
    );
  }
  /**
   * Invoke execute function in account contract
   *
   * @param calls the invocation object or an array of them, containing:
   * - contractAddress - the address of the contract
   * - entrypoint - the entrypoint of the contract
   * - calldata - (defaults to []) the calldata
   * - signature - (defaults to []) the signature
   * @param abis (optional) the abi of the contract for better displaying
   *
   * @returns response from addTransaction
   */
  async execute(calls) {
    return this.controller.execute(normalizeCalls(calls));
  }
};
export {
  NotReadyToConnect,
  ResponseCodes,
  SessionAccount as default
};
//# sourceMappingURL=account.js.map