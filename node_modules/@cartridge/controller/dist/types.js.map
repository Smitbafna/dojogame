{"version":3,"sources":["../src/types.ts"],"sourcesContent":["import {\n  constants,\n  BigNumberish,\n  Call,\n  Abi,\n  InvocationsDetails,\n} from \"starknet\";\nimport {\n  AddInvokeTransactionResult,\n  Signature,\n  TypedData,\n} from \"@starknet-io/types-js\";\nimport { KeychainIFrame, ProfileIFrame } from \"./iframe\";\nimport {\n  ColorMode,\n  Policies,\n  Policy,\n  SessionPolicies,\n} from \"@cartridge/presets\";\n\nexport type Session = {\n  chainId: constants.StarknetChainId;\n  policies: Policy[];\n  maxFee: BigNumberish;\n  expiresAt: bigint;\n  credentials: {\n    authorization: string[];\n    privateKey: string;\n  };\n};\n\nexport enum ResponseCodes {\n  SUCCESS = \"SUCCESS\",\n  NOT_CONNECTED = \"NOT_CONNECTED\",\n  ERROR = \"ERROR\",\n  CANCELED = \"CANCELED\",\n  USER_INTERACTION_REQUIRED = \"USER_INTERACTION_REQUIRED\",\n}\n\nexport type ConnectError = {\n  code: ResponseCodes;\n  message: string;\n  error?: ControllerError;\n};\n\nexport type ControllerError = {\n  code: Number;\n  message: string;\n  data?: any;\n};\n\nexport type ConnectReply = {\n  code: ResponseCodes.SUCCESS;\n  address: string;\n  policies?: SessionPolicies;\n};\n\nexport type ExecuteReply =\n  | (AddInvokeTransactionResult & {\n      code: ResponseCodes.SUCCESS;\n    })\n  | {\n      code: ResponseCodes.USER_INTERACTION_REQUIRED;\n    };\n\nexport type ProbeReply = {\n  code: ResponseCodes.SUCCESS;\n  address: string;\n};\n\nexport type DeployReply = {\n  code: ResponseCodes.SUCCESS;\n  transaction_hash: string;\n};\n\nexport type IFrames = {\n  keychain: KeychainIFrame;\n  profile?: ProfileIFrame;\n};\n\nexport interface LookupRequest {\n  usernames?: string[];\n  addresses?: string[];\n}\n\nexport interface LookupResult {\n  username: string;\n  addresses: string[];\n}\n\nexport interface LookupResponse {\n  results: LookupResult[];\n}\n\ntype ContractAddress = string;\ntype CartridgeID = string;\nexport type ControllerAccounts = Record<ContractAddress, CartridgeID>;\n\nexport interface Keychain {\n  probe(rpcUrl: string): Promise<ProbeReply | ConnectError>;\n  connect(\n    policies: Policies,\n    rpcUrl: string,\n  ): Promise<ConnectReply | ConnectError>;\n  disconnect(): void;\n\n  reset(): void;\n  revoke(origin: string): void;\n\n  deploy(): Promise<DeployReply | ConnectError>;\n  execute(\n    calls: Call | Call[],\n    abis?: Abi[],\n    transactionsDetail?: InvocationsDetails,\n    sync?: boolean,\n    paymaster?: any,\n    error?: ControllerError,\n  ): Promise<ExecuteReply | ConnectError>;\n  signMessage(\n    typedData: TypedData,\n    account: string,\n    async?: boolean,\n  ): Promise<Signature | ConnectError>;\n  logout(): Promise<void>;\n  openSettings(): Promise<void | ConnectError>;\n  session(): Promise<Session>;\n  sessions(): Promise<{\n    [key: string]: Session;\n  }>;\n  delegateAccount(): string;\n  username(): string;\n  fetchControllers(contractAddresses: string[]): Promise<ControllerAccounts>;\n  openPurchaseCredits(): void;\n  openExecute(): void;\n}\nexport interface Profile {\n  navigate(path: string): void;\n}\n\nexport interface Modal {\n  open: () => void;\n  close: () => void;\n}\n\n/**\n * Options for configuring the controller\n */\nexport type ControllerOptions = ProviderOptions &\n  KeychainOptions &\n  ProfileOptions;\n\nexport type IFrameOptions = {\n  /** The ID of the starter pack to use */\n  starterPackId?: string;\n  /** The theme to use */\n  theme?: string;\n  /** The preset to use */\n  preset?: string;\n  /** The color mode to use */\n  colorMode?: ColorMode;\n};\n\nexport type ProviderOptions = {\n  /** The URL of the RPC */\n  rpc: string;\n};\n\nexport type KeychainOptions = IFrameOptions & {\n  policies?: Policies;\n  /** The URL of keychain */\n  url?: string;\n  /** The origin of keychain */\n  origin?: string;\n  /** Propagate transaction errors back to caller instead of showing modal */\n  propagateSessionErrors?: boolean;\n};\n\nexport type ProfileOptions = IFrameOptions & {\n  /** The URL of profile. Mainly for internal development purpose */\n  profileUrl?: string;\n  /** The project name of Slot instance. */\n  slot?: string;\n  /** The namespace to use to fetch trophies data from indexer. Will be mandatory once profile page is in production */\n  namespace?: string;\n  /** The tokens to be listed on Inventory modal */\n  tokens?: Tokens;\n};\n\nexport type ProfileContextTypeVariant =\n  | \"inventory\"\n  | \"trophies\"\n  | \"achievements\"\n  | \"activity\";\n\nexport type Prefund = { address: string; min: string };\n\nexport type Tokens = {\n  erc20?: string[];\n};\n"],"mappings":";AA+BO,IAAK,gBAAL,kBAAKA,mBAAL;AACL,EAAAA,eAAA,aAAU;AACV,EAAAA,eAAA,mBAAgB;AAChB,EAAAA,eAAA,WAAQ;AACR,EAAAA,eAAA,cAAW;AACX,EAAAA,eAAA,+BAA4B;AALlB,SAAAA;AAAA,GAAA;","names":["ResponseCodes"]}