/* tslint:disable */
/* eslint-disable */
export enum ErrorCode {
  StarknetFailedToReceiveTransaction = 1,
  StarknetContractNotFound = 20,
  StarknetBlockNotFound = 24,
  StarknetInvalidTransactionIndex = 27,
  StarknetClassHashNotFound = 28,
  StarknetTransactionHashNotFound = 29,
  StarknetPageSizeTooBig = 31,
  StarknetNoBlocks = 32,
  StarknetInvalidContinuationToken = 33,
  StarknetTooManyKeysInFilter = 34,
  StarknetContractError = 40,
  StarknetTransactionExecutionError = 41,
  StarknetClassAlreadyDeclared = 51,
  StarknetInvalidTransactionNonce = 52,
  StarknetInsufficientMaxFee = 53,
  StarknetInsufficientAccountBalance = 54,
  StarknetValidationFailure = 55,
  StarknetCompilationFailed = 56,
  StarknetContractClassSizeIsTooLarge = 57,
  StarknetNonAccount = 58,
  StarknetDuplicateTx = 59,
  StarknetCompiledClassHashMismatch = 60,
  StarknetUnsupportedTxVersion = 61,
  StarknetUnsupportedContractClassVersion = 62,
  StarknetUnexpectedError = 63,
  StarknetNoTraceAvailable = 10,
  SignError = 101,
  StorageError = 102,
  AccountFactoryError = 103,
  PaymasterExecutionTimeNotReached = 104,
  PaymasterExecutionTimePassed = 105,
  PaymasterInvalidCaller = 106,
  PaymasterRateLimitExceeded = 107,
  PaymasterNotSupported = 108,
  PaymasterHttp = 109,
  PaymasterExcecution = 110,
  PaymasterSerialization = 111,
  CartridgeControllerNotDeployed = 112,
  InsufficientBalance = 113,
  OriginError = 114,
  EncodingError = 115,
  SerdeWasmBindgenError = 116,
  CairoSerdeError = 117,
  CairoShortStringToFeltError = 118,
  DeviceCreateCredential = 119,
  DeviceGetAssertion = 120,
  DeviceBadAssertion = 121,
  DeviceChannel = 122,
  DeviceOrigin = 123,
  AccountSigning = 124,
  AccountProvider = 125,
  AccountClassHashCalculation = 126,
  AccountClassCompression = 127,
  AccountFeeOutOfRange = 128,
  ProviderRateLimited = 129,
  ProviderArrayLengthMismatch = 130,
  ProviderOther = 131,
  SessionAlreadyRegistered = 132,
  UrlParseError = 133,
  Base64DecodeError = 134,
  CoseError = 135,
  PolicyChainIdMismatch = 136,
}
export interface JsEstimateFeeDetails {
    nonce: Felt;
}

export interface CallPolicy {
    target: string;
    method: string;
}

export interface TypedDataPolicy {
    scope_hash: string;
}

export type Policy = CallPolicy | TypedDataPolicy;

export interface JsCall {
    contractAddress: Felt;
    entrypoint: string;
    calldata: Felt[];
}

export interface JsInvocationsDetails {
    maxFee: Felt;
}

export interface WebauthnSigner {
    rpId: string;
    credentialId: string;
    publicKey: string;
}

export interface StarknetSigner {
    privateKey: JsFelt;
}

export interface Signer {
    webauthn?: WebauthnSigner;
    starknet?: StarknetSigner;
}

export type Felts = JsFelt[];

export type JsFelt = Felt;

export interface SessionMetadata {
    session: Session;
    maxFee: Felt | null;
    credentials: Credentials | null;
    isRegistered: boolean;
}

export interface Session {
    policies: Policy[];
    expiresAt: number;
}

export interface Credentials {
    authorization: Felt[];
    privateKey: Felt;
}

export class CartridgeAccount {
  private constructor();
  free(): void;
  /**
   * Creates a new `CartridgeAccount` instance.
   *
   * # Parameters
   * - `app_id`: Application identifier.
   * - `rpc_url`: The URL of the JSON-RPC endpoint.
   * - `chain_id`: Identifier of the blockchain network to interact with.
   * - `address`: The blockchain address associated with the account.
   * - `username`: Username associated with the account.
   * - `signer`: A Signer struct containing the signer type and associated data.
   */
  static new(app_id: string, class_hash: JsFelt, rpc_url: string, chain_id: JsFelt, address: JsFelt, username: string, signer: Signer): CartridgeAccount;
  static fromStorage(app_id: string): CartridgeAccount | undefined;
  username(): string;
  address(): string;
  classHash(): string;
  rpcUrl(): string;
  chainId(): string;
  disconnect(): void;
  ownerGuid(): JsFelt;
  registerSession(policies: (Policy)[], expires_at: bigint, public_key: JsFelt, max_fee: JsFelt): Promise<any>;
  registerSessionCalldata(policies: (Policy)[], expires_at: bigint, public_key: JsFelt): any;
  upgrade(new_class_hash: JsFelt): JsCall;
  createSession(policies: (Policy)[], expires_at: bigint): Promise<void>;
  estimateInvokeFee(calls: (JsCall)[]): Promise<any>;
  execute(calls: (JsCall)[], details: JsInvocationsDetails): Promise<any>;
  executeFromOutsideV2(calls: (JsCall)[]): Promise<any>;
  executeFromOutsideV3(calls: (JsCall)[]): Promise<any>;
  hasSession(calls: (JsCall)[]): boolean;
  hasSessionForMessage(typed_data: string): boolean;
  session(policies: (Policy)[], public_key?: JsFelt): SessionMetadata | undefined;
  revokeSession(): void;
  signMessage(typed_data: string): Promise<Felts>;
  getNonce(): Promise<any>;
  deploySelf(max_fee: JsFelt): Promise<any>;
  delegateAccount(): Promise<JsFelt>;
}
export class JsControllerError {
  private constructor();
  free(): void;
  code: ErrorCode;
  message: string;
  data?: string;
}
